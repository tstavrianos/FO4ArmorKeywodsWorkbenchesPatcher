using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.FormKeys.Fallout4;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Synthesis;

namespace FO4ArmorKeywodsWorkbenchesPatcher
{
    public static class Program
    {
        private static readonly HashSet<ModKey> Excluded = new()
        {
            ModKey.FromNameAndExtension("ArmorKeywords.esm"),
            ModKey.FromNameAndExtension("Armorsmith Extended.esp"),
            ModKey.FromNameAndExtension("Weaponsmith Extended 2.esp"),
            ModKey.FromNameAndExtension("ECO.esp"),
            ModKey.FromNameAndExtension("IDEKsLogisticsStation2.esl")
        };

        private static readonly HashSet<ModKey> Vanilla = new()
        {
            ModKey.FromNameAndExtension("Fallout4.esp"),
            ModKey.FromNameAndExtension("DLCRobot.esl"),
            ModKey.FromNameAndExtension("DLCworkshop01.esp"),
            ModKey.FromNameAndExtension("DLCCoast.esp"),
            ModKey.FromNameAndExtension("DLCworkshop02.esp"),
            ModKey.FromNameAndExtension("DLCworkshop03.esp"),
            ModKey.FromNameAndExtension("DLCNukaWorld.esp")
        };

        private static Lazy<Settings> _settings;
        private static Settings Settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.Fallout4, "ArmorKeywords_Patch.esp")
                .AddRunnabilityCheck(state =>
                {
                    state.LoadOrder.AssertListsMod(ArmorKeywords.ModKey,
                        "\nArmorKeywords plugin missing, not active, or inaccessible to patcher!\n\n");
                })
                .Run(args);
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            foreach (var cobjContext in state.LoadOrder.PriorityOrder.ConstructibleObject().WinningContextOverrides())
            {
                if (Excluded.Contains(cobjContext.ModKey)) continue;
                if (Settings.NoVanillaItems && Vanilla.Contains(cobjContext.ModKey)) continue;
                if (cobjContext.Record is null) continue;
                if (cobjContext.Record.IsDeleted) continue;

                var cobj = cobjContext.Record;

                if (cobj.WorkbenchKeyword.IsNull) continue;
                if (cobj.CreatedObject.IsNull) continue;

                if (Settings.FromChemistryStationOnly &&
                    cobj.WorkbenchKeyword.FormKey != Fallout4.Keyword.WorkbenchChemlab.FormKey)
                    continue;

                var craftRes = cobj.CreatedObject.TryResolve(state.LinkCache);
                if (craftRes is null || craftRes.IsDeleted) continue;

                FormLink<IKeywordGetter> target = null;

                if (Settings.AmmunitionToAmmunitionWorkbench && craftRes is IAmmunitionGetter)
                {
                    target = ArmorKeywords.Keyword.AEC_ck_AmmunitionCraftingKey;
                }
                else if (Settings.ArmorsToArmorsmithWorkbench && craftRes is IArmorGetter)
                {
                    target = ArmorKeywords.Keyword.AEC_ck_ArmorsmithCraftingKey;
                }
                else if ((Settings.WeaponsToWeaponsmithWorkbench || Settings.ExplosivesToExplosivesWorkbench ||
                          Settings.ExplosivesToWeaponsmithWorkbemch) && craftRes is IWeaponGetter weapon)
                {
                    if (Settings.WeaponsToWeaponsmithWorkbench &&
                        weapon.AnimationType != Weapon.AnimationTypes.Grenade &&
                        weapon.AnimationType != Weapon.AnimationTypes.Grenade)
                    {
                        target = ArmorKeywords.Keyword.AEC_ck_WeaponsmithCraftingKey;
                    }
                    else if (weapon.AnimationType is Weapon.AnimationTypes.Grenade or Weapon.AnimationTypes.Grenade)
                    {
                        if (Settings.ExplosivesToExplosivesWorkbench)
                            target = ArmorKeywords.Keyword.AEC_ck_ExplosivesCraftingKey;
                        else if (Settings.ExplosivesToWeaponsmithWorkbemch)
                            target = ArmorKeywords.Keyword.AEC_ck_WeaponsmithCraftingKey;
                    }
                }
                else if (Settings.AlchemyToUtilityWorkbench && craftRes is IIngestibleGetter)
                {
                    target = ArmorKeywords.Keyword.AEC_ck_UtilityCraftingKey;
                }
                else if (Settings.NotesToUtilityWorkbench && craftRes is IBookGetter or IHolotapeGetter)
                {
                    target = ArmorKeywords.Keyword.AEC_ck_UtilityCraftingKey;
                }
                else if (Settings.MiscToManufacturingAndUtilityWorkbench && craftRes is IMiscItemGetter misc)
                {
                    if (misc.Components is {Count: > 0})
                        target = ArmorKeywords.Keyword.AEC_ck_AdvancedEngineeringCraftingKey;
                    else
                        target = ArmorKeywords.Keyword.AEC_ck_UtilityCraftingKey;
                }

                if (target != null && cobj.WorkbenchKeyword.FormKey != target.FormKey)
                {
                    var copy = state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(cobj);
                    copy.WorkbenchKeyword.SetTo(target);
                }
            }
        }
    }
}